If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.


If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.

If you expect this [A] to be actively called on multiple [B] of significant length, it might be better to <C> its implementation onto the {D} class. With it any modification is performed directly on that instance, so you spare unnecessary copy operations.



